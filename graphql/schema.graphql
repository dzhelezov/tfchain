" All transfers "
type Transfer @entity {
  from: String!
  to: String!
  value: BigInt!
  comment: String @fulltext(query: "commentSearch")
  block: Int!
} 

type Entity @entity {
  gridVersion: Int!
  entityID: Int!
  name: String!
  countryID: Int
  cityID: Int
  accountID: String!
}

type Twin @entity {
  gridVersion: Int!
  twinID: Int!
  accountID: String!
  ip: String!
}

type EntityProof @entity {
  entityID: Int!
  signature: String!
  twinRel: Twin!
}

type Farm @entity {
  gridVersion: Int!
  farmID: Int!
  name: String!
  twinID: Int!
  pricingPolicyID: Int!
  certificationType: CertificationType!
  countryID: Int
  cityID: Int
  publicIPs: [PublicIp!] @derivedFrom(field: "farm")
}

type Node @entity {
  gridVersion: Int!
  nodeID: Int!
  farmID: Int!
  twinID: Int!
  location: Location!
  countryID: Int
  cityID: Int
  hru: BigInt
  sru: BigInt
  cru: BigInt
  mru: BigInt
  publicConfig: PublicConfig
}

type PublicIp @entity {
  farm: Farm
  gateway: String!
  ip: String!
  contract_id: Int!
}

enum CertificationType {
  Diy
  Certified
}

type PublicConfig @entity {
  ipv4: String!
  ipv6: String!
  gw4: String!
  gw6: String!
}

type Location @entity {
  longitude: String!
  latitude: String!
}

type PricingPolicy @entity {
  gridVersion: Int!
  pricingPolicyID: Int!
  name: String!
  currency: String!
  su: Int!
  cu: Int!
  nu: Int!
}

type Country @entity {
  id: Int!
  code: String!
  name: String!
  region: String!
  subregion: String!
}

type City @entity {
  id: Int!
  countryID: Int!
  name: String!
}

type NodeContract @entity {
  version: Int!
  contract_id: Int!
  twin_id: Int!
  node_id: Int!
  deployment_data: String!
  deployment_hash: String!
  numberOfPublicIPs: Int!
  state: ContractState!
}

enum ContractState {
  Created,
  Deleted,
  OutOfFunds
}

type Consumption @entity {
  contractID: Int!
  timestamp: Int!
  cru: Int!
  sru: Int!
  hru: Int!
  mru: Int!
  nru: Int!
}

type ContractBillReport @entity {
  contract_id: Int!
  discount_received: String!
  amount_billed: Int!
}