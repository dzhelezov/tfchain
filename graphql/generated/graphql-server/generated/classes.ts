// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
// prettier-ignore
// @ts-ignore
import { DateResolver as Date } from 'graphql-scalars';
// prettier-ignore
// @ts-ignore
import { GraphQLID as ID } from 'graphql';
// prettier-ignore
// @ts-ignore
import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
// prettier-ignore
// @ts-ignore
import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

import * as BN from "bn.js";

// prettier-ignore
// @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require('graphql-type-json');
// prettier-ignore
// @ts-ignore
import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString, BigInt, Bytes } from 'warthog';

import { CertificationType } from "../src/modules/farm/farm.model";
// @ts-ignore
import { City } from "../src/modules/city/city.model";
// @ts-ignore
import { Country } from "../src/modules/country/country.model";
// @ts-ignore
import { Twin } from "../src/modules/twin/twin.model";
// @ts-ignore
import { EntityProof } from "../src/modules/entity-proof/entity-proof.model";
// @ts-ignore
import { Entity } from "../src/modules/entity/entity.model";
// @ts-ignore
import { Farm } from "../src/modules/farm/farm.model";
// @ts-ignore
import { Resource } from "../src/modules/resource/resource.model";
// @ts-ignore
import { Node } from "../src/modules/node/node.model";
// @ts-ignore
import { Location } from "../src/modules/location/location.model";
// @ts-ignore
import { PricingPolicy } from "../src/modules/pricing-policy/pricing-policy.model";
// @ts-ignore
import { Transfer } from "../src/modules/transfer/transfer.model";

export enum CityOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  countryId_ASC = "countryId_ASC",
  countryId_DESC = "countryId_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC"
}

registerEnumType(CityOrderByEnum, {
  name: "CityOrderByInput"
});

@TypeGraphQLInputType()
export class CityWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  countryId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];
}

@TypeGraphQLInputType()
export class CityWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CityCreateInput {
  @TypeGraphQLField()
  countryId!: number;

  @TypeGraphQLField()
  name!: string;
}

@TypeGraphQLInputType()
export class CityUpdateInput {
  @TypeGraphQLField({ nullable: true })
  countryId?: number;

  @TypeGraphQLField({ nullable: true })
  name?: string;
}

@ArgsType()
export class CityWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CityWhereInput, { nullable: true })
  where?: CityWhereInput;

  @TypeGraphQLField(() => CityOrderByEnum, { nullable: true })
  orderBy?: CityOrderByEnum;
}

@ArgsType()
export class CityCreateManyArgs {
  @TypeGraphQLField(() => [CityCreateInput])
  data!: CityCreateInput[];
}

@ArgsType()
export class CityUpdateArgs {
  @TypeGraphQLField() data!: CityUpdateInput;
  @TypeGraphQLField() where!: CityWhereUniqueInput;
}

export enum CountryOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  code_ASC = "code_ASC",
  code_DESC = "code_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC"
}

registerEnumType(CountryOrderByEnum, {
  name: "CountryOrderByInput"
});

@TypeGraphQLInputType()
export class CountryWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  code_eq?: string;

  @TypeGraphQLField({ nullable: true })
  code_contains?: string;

  @TypeGraphQLField({ nullable: true })
  code_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  code_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  code_in?: string[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];
}

@TypeGraphQLInputType()
export class CountryWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CountryCreateInput {
  @TypeGraphQLField()
  code!: string;

  @TypeGraphQLField()
  name!: string;
}

@TypeGraphQLInputType()
export class CountryUpdateInput {
  @TypeGraphQLField({ nullable: true })
  code?: string;

  @TypeGraphQLField({ nullable: true })
  name?: string;
}

@ArgsType()
export class CountryWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CountryWhereInput, { nullable: true })
  where?: CountryWhereInput;

  @TypeGraphQLField(() => CountryOrderByEnum, { nullable: true })
  orderBy?: CountryOrderByEnum;
}

@ArgsType()
export class CountryCreateManyArgs {
  @TypeGraphQLField(() => [CountryCreateInput])
  data!: CountryCreateInput[];
}

@ArgsType()
export class CountryUpdateArgs {
  @TypeGraphQLField() data!: CountryUpdateInput;
  @TypeGraphQLField() where!: CountryWhereUniqueInput;
}

export enum TwinOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  gridVersion_ASC = "gridVersion_ASC",
  gridVersion_DESC = "gridVersion_DESC",

  twinId_ASC = "twinId_ASC",
  twinId_DESC = "twinId_DESC",

  address_ASC = "address_ASC",
  address_DESC = "address_DESC",

  ip_ASC = "ip_ASC",
  ip_DESC = "ip_DESC"
}

registerEnumType(TwinOrderByEnum, {
  name: "TwinOrderByInput"
});

@TypeGraphQLInputType()
export class TwinWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  gridVersion_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  twinId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  address_eq?: string;

  @TypeGraphQLField({ nullable: true })
  address_contains?: string;

  @TypeGraphQLField({ nullable: true })
  address_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  address_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  address_in?: string[];

  @TypeGraphQLField({ nullable: true })
  ip_eq?: string;

  @TypeGraphQLField({ nullable: true })
  ip_contains?: string;

  @TypeGraphQLField({ nullable: true })
  ip_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  ip_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  ip_in?: string[];
}

@TypeGraphQLInputType()
export class TwinWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class TwinCreateInput {
  @TypeGraphQLField()
  gridVersion!: number;

  @TypeGraphQLField()
  twinId!: number;

  @TypeGraphQLField()
  address!: string;

  @TypeGraphQLField()
  ip!: string;
}

@TypeGraphQLInputType()
export class TwinUpdateInput {
  @TypeGraphQLField({ nullable: true })
  gridVersion?: number;

  @TypeGraphQLField({ nullable: true })
  twinId?: number;

  @TypeGraphQLField({ nullable: true })
  address?: string;

  @TypeGraphQLField({ nullable: true })
  ip?: string;
}

@ArgsType()
export class TwinWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => TwinWhereInput, { nullable: true })
  where?: TwinWhereInput;

  @TypeGraphQLField(() => TwinOrderByEnum, { nullable: true })
  orderBy?: TwinOrderByEnum;
}

@ArgsType()
export class TwinCreateManyArgs {
  @TypeGraphQLField(() => [TwinCreateInput])
  data!: TwinCreateInput[];
}

@ArgsType()
export class TwinUpdateArgs {
  @TypeGraphQLField() data!: TwinUpdateInput;
  @TypeGraphQLField() where!: TwinWhereUniqueInput;
}

export enum EntityProofOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  entityId_ASC = "entityId_ASC",
  entityId_DESC = "entityId_DESC",

  signature_ASC = "signature_ASC",
  signature_DESC = "signature_DESC",

  twinRelId_ASC = "twinRelId_ASC",
  twinRelId_DESC = "twinRelId_DESC"
}

registerEnumType(EntityProofOrderByEnum, {
  name: "EntityProofOrderByInput"
});

@TypeGraphQLInputType()
export class EntityProofWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  entityId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  signature_eq?: string;

  @TypeGraphQLField({ nullable: true })
  signature_contains?: string;

  @TypeGraphQLField({ nullable: true })
  signature_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  signature_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  signature_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  twinRelId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  twinRelId_in?: string[];
}

@TypeGraphQLInputType()
export class EntityProofWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class EntityProofCreateInput {
  @TypeGraphQLField()
  entityId!: number;

  @TypeGraphQLField()
  signature!: string;

  @TypeGraphQLField(() => ID)
  twinRelId!: string;
}

@TypeGraphQLInputType()
export class EntityProofUpdateInput {
  @TypeGraphQLField({ nullable: true })
  entityId?: number;

  @TypeGraphQLField({ nullable: true })
  signature?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  twinRelId?: string;
}

@ArgsType()
export class EntityProofWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => EntityProofWhereInput, { nullable: true })
  where?: EntityProofWhereInput;

  @TypeGraphQLField(() => EntityProofOrderByEnum, { nullable: true })
  orderBy?: EntityProofOrderByEnum;
}

@ArgsType()
export class EntityProofCreateManyArgs {
  @TypeGraphQLField(() => [EntityProofCreateInput])
  data!: EntityProofCreateInput[];
}

@ArgsType()
export class EntityProofUpdateArgs {
  @TypeGraphQLField() data!: EntityProofUpdateInput;
  @TypeGraphQLField() where!: EntityProofWhereUniqueInput;
}

export enum EntityOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  gridVersion_ASC = "gridVersion_ASC",
  gridVersion_DESC = "gridVersion_DESC",

  entityId_ASC = "entityId_ASC",
  entityId_DESC = "entityId_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  countryId_ASC = "countryId_ASC",
  countryId_DESC = "countryId_DESC",

  cityId_ASC = "cityId_ASC",
  cityId_DESC = "cityId_DESC",

  address_ASC = "address_ASC",
  address_DESC = "address_DESC"
}

registerEnumType(EntityOrderByEnum, {
  name: "EntityOrderByInput"
});

@TypeGraphQLInputType()
export class EntityWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  gridVersion_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  entityId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  countryId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  cityId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  address_eq?: string;

  @TypeGraphQLField({ nullable: true })
  address_contains?: string;

  @TypeGraphQLField({ nullable: true })
  address_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  address_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  address_in?: string[];
}

@TypeGraphQLInputType()
export class EntityWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class EntityCreateInput {
  @TypeGraphQLField()
  gridVersion!: number;

  @TypeGraphQLField()
  entityId!: number;

  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField({ nullable: true })
  countryId?: number;

  @TypeGraphQLField({ nullable: true })
  cityId?: number;

  @TypeGraphQLField()
  address!: string;
}

@TypeGraphQLInputType()
export class EntityUpdateInput {
  @TypeGraphQLField({ nullable: true })
  gridVersion?: number;

  @TypeGraphQLField({ nullable: true })
  entityId?: number;

  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  countryId?: number;

  @TypeGraphQLField({ nullable: true })
  cityId?: number;

  @TypeGraphQLField({ nullable: true })
  address?: string;
}

@ArgsType()
export class EntityWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => EntityWhereInput, { nullable: true })
  where?: EntityWhereInput;

  @TypeGraphQLField(() => EntityOrderByEnum, { nullable: true })
  orderBy?: EntityOrderByEnum;
}

@ArgsType()
export class EntityCreateManyArgs {
  @TypeGraphQLField(() => [EntityCreateInput])
  data!: EntityCreateInput[];
}

@ArgsType()
export class EntityUpdateArgs {
  @TypeGraphQLField() data!: EntityUpdateInput;
  @TypeGraphQLField() where!: EntityWhereUniqueInput;
}

export enum FarmOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  gridVersion_ASC = "gridVersion_ASC",
  gridVersion_DESC = "gridVersion_DESC",

  farmId_ASC = "farmId_ASC",
  farmId_DESC = "farmId_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  twinId_ASC = "twinId_ASC",
  twinId_DESC = "twinId_DESC",

  pricingPolicyId_ASC = "pricingPolicyId_ASC",
  pricingPolicyId_DESC = "pricingPolicyId_DESC",

  certificationType_ASC = "certificationType_ASC",
  certificationType_DESC = "certificationType_DESC",

  countryId_ASC = "countryId_ASC",
  countryId_DESC = "countryId_DESC",

  cityId_ASC = "cityId_ASC",
  cityId_DESC = "cityId_DESC"
}

registerEnumType(FarmOrderByEnum, {
  name: "FarmOrderByInput"
});

@TypeGraphQLInputType()
export class FarmWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  gridVersion_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  farmId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  twinId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  pricingPolicyId_in?: number[];

  @TypeGraphQLField(() => CertificationType, { nullable: true })
  certificationType_eq?: CertificationType;

  @TypeGraphQLField(() => [CertificationType], { nullable: true })
  certificationType_in?: CertificationType[];

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  countryId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  cityId_in?: number[];
}

@TypeGraphQLInputType()
export class FarmWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class FarmCreateInput {
  @TypeGraphQLField()
  gridVersion!: number;

  @TypeGraphQLField()
  farmId!: number;

  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  twinId!: number;

  @TypeGraphQLField()
  pricingPolicyId!: number;

  @TypeGraphQLField(() => CertificationType)
  certificationType!: CertificationType;

  @TypeGraphQLField({ nullable: true })
  countryId?: number;

  @TypeGraphQLField({ nullable: true })
  cityId?: number;
}

@TypeGraphQLInputType()
export class FarmUpdateInput {
  @TypeGraphQLField({ nullable: true })
  gridVersion?: number;

  @TypeGraphQLField({ nullable: true })
  farmId?: number;

  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  twinId?: number;

  @TypeGraphQLField({ nullable: true })
  pricingPolicyId?: number;

  @TypeGraphQLField(() => CertificationType, { nullable: true })
  certificationType?: CertificationType;

  @TypeGraphQLField({ nullable: true })
  countryId?: number;

  @TypeGraphQLField({ nullable: true })
  cityId?: number;
}

@ArgsType()
export class FarmWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => FarmWhereInput, { nullable: true })
  where?: FarmWhereInput;

  @TypeGraphQLField(() => FarmOrderByEnum, { nullable: true })
  orderBy?: FarmOrderByEnum;
}

@ArgsType()
export class FarmCreateManyArgs {
  @TypeGraphQLField(() => [FarmCreateInput])
  data!: FarmCreateInput[];
}

@ArgsType()
export class FarmUpdateArgs {
  @TypeGraphQLField() data!: FarmUpdateInput;
  @TypeGraphQLField() where!: FarmWhereUniqueInput;
}

export enum ResourceOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  hru_ASC = "hru_ASC",
  hru_DESC = "hru_DESC",

  sru_ASC = "sru_ASC",
  sru_DESC = "sru_DESC",

  cru_ASC = "cru_ASC",
  cru_DESC = "cru_DESC",

  mru_ASC = "mru_ASC",
  mru_DESC = "mru_DESC"
}

registerEnumType(ResourceOrderByEnum, {
  name: "ResourceOrderByInput"
});

@TypeGraphQLInputType()
export class ResourceWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  hru_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  hru_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  hru_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  hru_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  hru_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  hru_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  sru_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  sru_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  sru_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  sru_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  sru_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  sru_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  cru_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cru_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cru_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cru_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cru_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  cru_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  mru_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  mru_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  mru_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  mru_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  mru_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  mru_in?: number[];
}

@TypeGraphQLInputType()
export class ResourceWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class ResourceCreateInput {
  @TypeGraphQLField({ nullable: true })
  hru?: number;

  @TypeGraphQLField({ nullable: true })
  sru?: number;

  @TypeGraphQLField({ nullable: true })
  cru?: number;

  @TypeGraphQLField({ nullable: true })
  mru?: number;
}

@TypeGraphQLInputType()
export class ResourceUpdateInput {
  @TypeGraphQLField({ nullable: true })
  hru?: number;

  @TypeGraphQLField({ nullable: true })
  sru?: number;

  @TypeGraphQLField({ nullable: true })
  cru?: number;

  @TypeGraphQLField({ nullable: true })
  mru?: number;
}

@ArgsType()
export class ResourceWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => ResourceWhereInput, { nullable: true })
  where?: ResourceWhereInput;

  @TypeGraphQLField(() => ResourceOrderByEnum, { nullable: true })
  orderBy?: ResourceOrderByEnum;
}

@ArgsType()
export class ResourceCreateManyArgs {
  @TypeGraphQLField(() => [ResourceCreateInput])
  data!: ResourceCreateInput[];
}

@ArgsType()
export class ResourceUpdateArgs {
  @TypeGraphQLField() data!: ResourceUpdateInput;
  @TypeGraphQLField() where!: ResourceWhereUniqueInput;
}

export enum NodeOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  gridVersion_ASC = "gridVersion_ASC",
  gridVersion_DESC = "gridVersion_DESC",

  nodeId_ASC = "nodeId_ASC",
  nodeId_DESC = "nodeId_DESC",

  farmId_ASC = "farmId_ASC",
  farmId_DESC = "farmId_DESC",

  resourcesId_ASC = "resourcesId_ASC",
  resourcesId_DESC = "resourcesId_DESC",

  locationId_ASC = "locationId_ASC",
  locationId_DESC = "locationId_DESC",

  countryId_ASC = "countryId_ASC",
  countryId_DESC = "countryId_DESC",

  cityId_ASC = "cityId_ASC",
  cityId_DESC = "cityId_DESC",

  address_ASC = "address_ASC",
  address_DESC = "address_DESC",

  pubKey_ASC = "pubKey_ASC",
  pubKey_DESC = "pubKey_DESC"
}

registerEnumType(NodeOrderByEnum, {
  name: "NodeOrderByInput"
});

@TypeGraphQLInputType()
export class NodeWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  gridVersion_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  nodeId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  farmId_in?: number[];

  @TypeGraphQLField(() => ID, { nullable: true })
  resourcesId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  resourcesId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  locationId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  locationId_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  countryId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  cityId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  address_eq?: string;

  @TypeGraphQLField({ nullable: true })
  address_contains?: string;

  @TypeGraphQLField({ nullable: true })
  address_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  address_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  address_in?: string[];

  @TypeGraphQLField({ nullable: true })
  pubKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  pubKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  pubKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  pubKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  pubKey_in?: string[];
}

@TypeGraphQLInputType()
export class NodeWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class NodeCreateInput {
  @TypeGraphQLField()
  gridVersion!: number;

  @TypeGraphQLField()
  nodeId!: number;

  @TypeGraphQLField()
  farmId!: number;

  @TypeGraphQLField(() => ID)
  resourcesId!: string;

  @TypeGraphQLField(() => ID)
  locationId!: string;

  @TypeGraphQLField({ nullable: true })
  countryId?: number;

  @TypeGraphQLField({ nullable: true })
  cityId?: number;

  @TypeGraphQLField()
  address!: string;

  @TypeGraphQLField()
  pubKey!: string;
}

@TypeGraphQLInputType()
export class NodeUpdateInput {
  @TypeGraphQLField({ nullable: true })
  gridVersion?: number;

  @TypeGraphQLField({ nullable: true })
  nodeId?: number;

  @TypeGraphQLField({ nullable: true })
  farmId?: number;

  @TypeGraphQLField(() => ID, { nullable: true })
  resourcesId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  locationId?: string;

  @TypeGraphQLField({ nullable: true })
  countryId?: number;

  @TypeGraphQLField({ nullable: true })
  cityId?: number;

  @TypeGraphQLField({ nullable: true })
  address?: string;

  @TypeGraphQLField({ nullable: true })
  pubKey?: string;
}

@ArgsType()
export class NodeWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => NodeWhereInput, { nullable: true })
  where?: NodeWhereInput;

  @TypeGraphQLField(() => NodeOrderByEnum, { nullable: true })
  orderBy?: NodeOrderByEnum;
}

@ArgsType()
export class NodeCreateManyArgs {
  @TypeGraphQLField(() => [NodeCreateInput])
  data!: NodeCreateInput[];
}

@ArgsType()
export class NodeUpdateArgs {
  @TypeGraphQLField() data!: NodeUpdateInput;
  @TypeGraphQLField() where!: NodeWhereUniqueInput;
}

export enum LocationOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  longitude_ASC = "longitude_ASC",
  longitude_DESC = "longitude_DESC",

  latitude_ASC = "latitude_ASC",
  latitude_DESC = "latitude_DESC"
}

registerEnumType(LocationOrderByEnum, {
  name: "LocationOrderByInput"
});

@TypeGraphQLInputType()
export class LocationWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  longitude_eq?: string;

  @TypeGraphQLField({ nullable: true })
  longitude_contains?: string;

  @TypeGraphQLField({ nullable: true })
  longitude_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  longitude_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  longitude_in?: string[];

  @TypeGraphQLField({ nullable: true })
  latitude_eq?: string;

  @TypeGraphQLField({ nullable: true })
  latitude_contains?: string;

  @TypeGraphQLField({ nullable: true })
  latitude_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  latitude_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  latitude_in?: string[];
}

@TypeGraphQLInputType()
export class LocationWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class LocationCreateInput {
  @TypeGraphQLField()
  longitude!: string;

  @TypeGraphQLField()
  latitude!: string;
}

@TypeGraphQLInputType()
export class LocationUpdateInput {
  @TypeGraphQLField({ nullable: true })
  longitude?: string;

  @TypeGraphQLField({ nullable: true })
  latitude?: string;
}

@ArgsType()
export class LocationWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => LocationWhereInput, { nullable: true })
  where?: LocationWhereInput;

  @TypeGraphQLField(() => LocationOrderByEnum, { nullable: true })
  orderBy?: LocationOrderByEnum;
}

@ArgsType()
export class LocationCreateManyArgs {
  @TypeGraphQLField(() => [LocationCreateInput])
  data!: LocationCreateInput[];
}

@ArgsType()
export class LocationUpdateArgs {
  @TypeGraphQLField() data!: LocationUpdateInput;
  @TypeGraphQLField() where!: LocationWhereUniqueInput;
}

export enum PricingPolicyOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  gridVersion_ASC = "gridVersion_ASC",
  gridVersion_DESC = "gridVersion_DESC",

  pricingPolicyId_ASC = "pricingPolicyId_ASC",
  pricingPolicyId_DESC = "pricingPolicyId_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  currency_ASC = "currency_ASC",
  currency_DESC = "currency_DESC",

  su_ASC = "su_ASC",
  su_DESC = "su_DESC",

  cu_ASC = "cu_ASC",
  cu_DESC = "cu_DESC",

  nu_ASC = "nu_ASC",
  nu_DESC = "nu_DESC"
}

registerEnumType(PricingPolicyOrderByEnum, {
  name: "PricingPolicyOrderByInput"
});

@TypeGraphQLInputType()
export class PricingPolicyWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  gridVersion_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  pricingPolicyId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  currency_eq?: string;

  @TypeGraphQLField({ nullable: true })
  currency_contains?: string;

  @TypeGraphQLField({ nullable: true })
  currency_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  currency_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  currency_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  su_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  su_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  su_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  su_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  su_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  su_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  cu_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cu_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cu_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cu_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cu_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  cu_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  nu_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nu_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nu_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nu_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nu_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  nu_in?: number[];
}

@TypeGraphQLInputType()
export class PricingPolicyWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PricingPolicyCreateInput {
  @TypeGraphQLField()
  gridVersion!: number;

  @TypeGraphQLField()
  pricingPolicyId!: number;

  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  currency!: string;

  @TypeGraphQLField()
  su!: number;

  @TypeGraphQLField()
  cu!: number;

  @TypeGraphQLField()
  nu!: number;
}

@TypeGraphQLInputType()
export class PricingPolicyUpdateInput {
  @TypeGraphQLField({ nullable: true })
  gridVersion?: number;

  @TypeGraphQLField({ nullable: true })
  pricingPolicyId?: number;

  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  currency?: string;

  @TypeGraphQLField({ nullable: true })
  su?: number;

  @TypeGraphQLField({ nullable: true })
  cu?: number;

  @TypeGraphQLField({ nullable: true })
  nu?: number;
}

@ArgsType()
export class PricingPolicyWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PricingPolicyWhereInput, { nullable: true })
  where?: PricingPolicyWhereInput;

  @TypeGraphQLField(() => PricingPolicyOrderByEnum, { nullable: true })
  orderBy?: PricingPolicyOrderByEnum;
}

@ArgsType()
export class PricingPolicyCreateManyArgs {
  @TypeGraphQLField(() => [PricingPolicyCreateInput])
  data!: PricingPolicyCreateInput[];
}

@ArgsType()
export class PricingPolicyUpdateArgs {
  @TypeGraphQLField() data!: PricingPolicyUpdateInput;
  @TypeGraphQLField() where!: PricingPolicyWhereUniqueInput;
}

export enum TransferOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  from_ASC = "from_ASC",
  from_DESC = "from_DESC",

  to_ASC = "to_ASC",
  to_DESC = "to_DESC",

  value_ASC = "value_ASC",
  value_DESC = "value_DESC",

  comment_ASC = "comment_ASC",
  comment_DESC = "comment_DESC",

  block_ASC = "block_ASC",
  block_DESC = "block_DESC"
}

registerEnumType(TransferOrderByEnum, {
  name: "TransferOrderByInput"
});

@TypeGraphQLInputType()
export class TransferWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  from_eq?: string;

  @TypeGraphQLField({ nullable: true })
  from_contains?: string;

  @TypeGraphQLField({ nullable: true })
  from_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  from_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  from_in?: string[];

  @TypeGraphQLField({ nullable: true })
  to_eq?: string;

  @TypeGraphQLField({ nullable: true })
  to_contains?: string;

  @TypeGraphQLField({ nullable: true })
  to_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  to_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  to_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  value_eq?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  value_gt?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  value_gte?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  value_lt?: BN;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  value_lte?: BN;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  value_in?: BN[];

  @TypeGraphQLField({ nullable: true })
  comment_eq?: string;

  @TypeGraphQLField({ nullable: true })
  comment_contains?: string;

  @TypeGraphQLField({ nullable: true })
  comment_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  comment_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  comment_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  block_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  block_in?: number[];
}

@TypeGraphQLInputType()
export class TransferWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class TransferCreateInput {
  @TypeGraphQLField()
  from!: string;

  @TypeGraphQLField()
  to!: string;

  @TypeGraphQLField(() => BigInt)
  value!: BN;

  @TypeGraphQLField({ nullable: true })
  comment?: string;

  @TypeGraphQLField()
  block!: number;
}

@TypeGraphQLInputType()
export class TransferUpdateInput {
  @TypeGraphQLField({ nullable: true })
  from?: string;

  @TypeGraphQLField({ nullable: true })
  to?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  value?: BN;

  @TypeGraphQLField({ nullable: true })
  comment?: string;

  @TypeGraphQLField({ nullable: true })
  block?: number;
}

@ArgsType()
export class TransferWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => TransferWhereInput, { nullable: true })
  where?: TransferWhereInput;

  @TypeGraphQLField(() => TransferOrderByEnum, { nullable: true })
  orderBy?: TransferOrderByEnum;
}

@ArgsType()
export class TransferCreateManyArgs {
  @TypeGraphQLField(() => [TransferCreateInput])
  data!: TransferCreateInput[];
}

@ArgsType()
export class TransferUpdateArgs {
  @TypeGraphQLField() data!: TransferUpdateInput;
  @TypeGraphQLField() where!: TransferWhereUniqueInput;
}
