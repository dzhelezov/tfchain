
      // This file has been auto-generated by Warthog.  Do not update directly as it
      // will be re-written.  If you need to change this file, update models or add
      // new TypeGraphQL objects
      // prettier-ignore
      // @ts-ignore
      import { DateResolver as Date } from 'graphql-scalars';
      // prettier-ignore
      // @ts-ignore
      import { GraphQLID as ID } from 'graphql';
      // prettier-ignore
      // @ts-ignore
      import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
      // prettier-ignore
      // @ts-ignore
      import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

      import * as BN from 'bn.js';

      // prettier-ignore
      // @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
      const { GraphQLJSONObject } = require('graphql-type-json');
      // prettier-ignore
      // @ts-ignore
      import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString, BigInt, Bytes } from 'warthog';

      import { CertificationCodeType } from '../src/modules/certification-codes/certification-codes.model'import { CertificationType } from '../src/modules/farm/farm.model'
      // @ts-ignore
import { CertificationCodes } from '../src/modules/certification-codes/certification-codes.model'
// @ts-ignore
import { Entity } from '../src/modules/entity/entity.model'
// @ts-ignore
import { Farm } from '../src/modules/farm/farm.model'
// @ts-ignore
import { Resources } from '../src/modules/resources/resources.model'
// @ts-ignore
import { Node } from '../src/modules/node/node.model'
// @ts-ignore
import { Location } from '../src/modules/location/location.model'
// @ts-ignore
import { PricingPolicy } from '../src/modules/pricing-policy/pricing-policy.model'
// @ts-ignore
import { Transfer } from '../src/modules/transfer/transfer.model'
// @ts-ignore
import { Twin } from '../src/modules/twin/twin.model'

    
        
    export enum CertificationCodesOrderByEnum {
      
        createdAt_ASC = 'createdAt_ASC',
        createdAt_DESC = 'createdAt_DESC',
      
        updatedAt_ASC = 'updatedAt_ASC',
        updatedAt_DESC = 'updatedAt_DESC',
      
        deletedAt_ASC = 'deletedAt_ASC',
        deletedAt_DESC = 'deletedAt_DESC',
      
        certificationCodeId_ASC = 'certificationCodeId_ASC',
        certificationCodeId_DESC = 'certificationCodeId_DESC',
      
        name_ASC = 'name_ASC',
        name_DESC = 'name_DESC',
      
        description_ASC = 'description_ASC',
        description_DESC = 'description_DESC',
      
        certificationCodeType_ASC = 'certificationCodeType_ASC',
        certificationCodeType_DESC = 'certificationCodeType_DESC',
      
    }

    registerEnumType(CertificationCodesOrderByEnum, {
      name: 'CertificationCodesOrderByInput'
    });
  
        
    @TypeGraphQLInputType()
    export class CertificationCodesWhereInput {
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          id_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        id_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          createdById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        createdById_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          updatedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        updatedById_in?: string[];
        
        @TypeGraphQLField({ nullable: true })
          deletedAt_all?: Boolean;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          deletedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        deletedById_in?: string[];
        
        @TypeGraphQLField(() => BigInt, { nullable: true })
        certificationCodeId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        certificationCodeId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        certificationCodeId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        certificationCodeId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        certificationCodeId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        certificationCodeId_in?: BN[];
      
          @TypeGraphQLField({ nullable: true })
          name_eq?: string;
        
          @TypeGraphQLField({ nullable: true })
          name_contains?: string;
        
          @TypeGraphQLField({ nullable: true })
          name_startsWith?: string;
        
          @TypeGraphQLField({ nullable: true })
          name_endsWith?: string;
        
          @TypeGraphQLField(() => [String], { nullable: true })
          name_in?: string[];
      
          @TypeGraphQLField({ nullable: true })
          description_eq?: string;
        
          @TypeGraphQLField({ nullable: true })
          description_contains?: string;
        
          @TypeGraphQLField({ nullable: true })
          description_startsWith?: string;
        
          @TypeGraphQLField({ nullable: true })
          description_endsWith?: string;
        
          @TypeGraphQLField(() => [String], { nullable: true })
          description_in?: string[];
      
          @TypeGraphQLField(() => CertificationCodeType, { nullable: true })
          certificationCodeType_eq?: CertificationCodeType;
      
          @TypeGraphQLField(() => [CertificationCodeType], { nullable: true })
          certificationCodeType_in?: CertificationCodeType[];
      
    }
  
        
    @TypeGraphQLInputType()
    export class CertificationCodesWhereUniqueInput {
      
        @TypeGraphQLField(() => ID)
        id?: string;
      
    }
  
        
    @TypeGraphQLInputType()
    export class CertificationCodesCreateInput {
      
          @TypeGraphQLField(() => BigInt, )
          certificationCodeId!: BN;
       
          @TypeGraphQLField()
          name!: string;
        
          @TypeGraphQLField({ nullable: true })
          description?: string;
        
          @TypeGraphQLField(() => CertificationCodeType, { nullable: true })
          certificationCodeType?: CertificationCodeType;
       
    }
  
        
    @TypeGraphQLInputType()
    export class CertificationCodesUpdateInput {
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        certificationCodeId?: BN;
      
        @TypeGraphQLField({ nullable: true })
        name?: string;
      
        @TypeGraphQLField({ nullable: true })
        description?: string;
      
        @TypeGraphQLField(() => CertificationCodeType, { nullable: true })
        certificationCodeType?: CertificationCodeType;
      
    }
  
        
    @ArgsType()
    export class CertificationCodesWhereArgs extends PaginationArgs {
      @TypeGraphQLField(() => CertificationCodesWhereInput, { nullable: true })
      where?: CertificationCodesWhereInput;

      @TypeGraphQLField(() => CertificationCodesOrderByEnum, { nullable: true })
      orderBy?: CertificationCodesOrderByEnum;
    }
  
        
    @ArgsType()
    export class CertificationCodesCreateManyArgs {
      @TypeGraphQLField(() => [CertificationCodesCreateInput])
      data!: CertificationCodesCreateInput[];
    }
  
        
    @ArgsType()
    export class CertificationCodesUpdateArgs {
      @TypeGraphQLField() data!: CertificationCodesUpdateInput;
      @TypeGraphQLField() where!: CertificationCodesWhereUniqueInput;
    }
  
      
        
    export enum EntityOrderByEnum {
      
        createdAt_ASC = 'createdAt_ASC',
        createdAt_DESC = 'createdAt_DESC',
      
        updatedAt_ASC = 'updatedAt_ASC',
        updatedAt_DESC = 'updatedAt_DESC',
      
        deletedAt_ASC = 'deletedAt_ASC',
        deletedAt_DESC = 'deletedAt_DESC',
      
        entityId_ASC = 'entityId_ASC',
        entityId_DESC = 'entityId_DESC',
      
        name_ASC = 'name_ASC',
        name_DESC = 'name_DESC',
      
        countryId_ASC = 'countryId_ASC',
        countryId_DESC = 'countryId_DESC',
      
        cityId_ASC = 'cityId_ASC',
        cityId_DESC = 'cityId_DESC',
      
        pubKey_ASC = 'pubKey_ASC',
        pubKey_DESC = 'pubKey_DESC',
      
    }

    registerEnumType(EntityOrderByEnum, {
      name: 'EntityOrderByInput'
    });
  
        
    @TypeGraphQLInputType()
    export class EntityWhereInput {
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          id_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        id_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          createdById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        createdById_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          updatedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        updatedById_in?: string[];
        
        @TypeGraphQLField({ nullable: true })
          deletedAt_all?: Boolean;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          deletedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        deletedById_in?: string[];
        
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        entityId_in?: BN[];
      
          @TypeGraphQLField({ nullable: true })
          name_eq?: string;
        
          @TypeGraphQLField({ nullable: true })
          name_contains?: string;
        
          @TypeGraphQLField({ nullable: true })
          name_startsWith?: string;
        
          @TypeGraphQLField({ nullable: true })
          name_endsWith?: string;
        
          @TypeGraphQLField(() => [String], { nullable: true })
          name_in?: string[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        countryId_in?: BN[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        cityId_in?: BN[];
      
          @TypeGraphQLField({ nullable: true })
          pubKey_eq?: string;
        
          @TypeGraphQLField({ nullable: true })
          pubKey_contains?: string;
        
          @TypeGraphQLField({ nullable: true })
          pubKey_startsWith?: string;
        
          @TypeGraphQLField({ nullable: true })
          pubKey_endsWith?: string;
        
          @TypeGraphQLField(() => [String], { nullable: true })
          pubKey_in?: string[];
      
    }
  
        
    @TypeGraphQLInputType()
    export class EntityWhereUniqueInput {
      
        @TypeGraphQLField(() => ID)
        id?: string;
      
    }
  
        
    @TypeGraphQLInputType()
    export class EntityCreateInput {
      
          @TypeGraphQLField(() => BigInt, )
          entityId!: BN;
       
          @TypeGraphQLField()
          name!: string;
        
          @TypeGraphQLField(() => BigInt, { nullable: true })
          countryId?: BN;
       
          @TypeGraphQLField(() => BigInt, { nullable: true })
          cityId?: BN;
       
          @TypeGraphQLField()
          pubKey!: string;
        
    }
  
        
    @TypeGraphQLInputType()
    export class EntityUpdateInput {
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId?: BN;
      
        @TypeGraphQLField({ nullable: true })
        name?: string;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId?: BN;
      
        @TypeGraphQLField({ nullable: true })
        pubKey?: string;
      
    }
  
        
    @ArgsType()
    export class EntityWhereArgs extends PaginationArgs {
      @TypeGraphQLField(() => EntityWhereInput, { nullable: true })
      where?: EntityWhereInput;

      @TypeGraphQLField(() => EntityOrderByEnum, { nullable: true })
      orderBy?: EntityOrderByEnum;
    }
  
        
    @ArgsType()
    export class EntityCreateManyArgs {
      @TypeGraphQLField(() => [EntityCreateInput])
      data!: EntityCreateInput[];
    }
  
        
    @ArgsType()
    export class EntityUpdateArgs {
      @TypeGraphQLField() data!: EntityUpdateInput;
      @TypeGraphQLField() where!: EntityWhereUniqueInput;
    }
  
      
        
    export enum FarmOrderByEnum {
      
        createdAt_ASC = 'createdAt_ASC',
        createdAt_DESC = 'createdAt_DESC',
      
        updatedAt_ASC = 'updatedAt_ASC',
        updatedAt_DESC = 'updatedAt_DESC',
      
        deletedAt_ASC = 'deletedAt_ASC',
        deletedAt_DESC = 'deletedAt_DESC',
      
        farmId_ASC = 'farmId_ASC',
        farmId_DESC = 'farmId_DESC',
      
        name_ASC = 'name_ASC',
        name_DESC = 'name_DESC',
      
        entityId_ASC = 'entityId_ASC',
        entityId_DESC = 'entityId_DESC',
      
        twinId_ASC = 'twinId_ASC',
        twinId_DESC = 'twinId_DESC',
      
        pricingPolicyId_ASC = 'pricingPolicyId_ASC',
        pricingPolicyId_DESC = 'pricingPolicyId_DESC',
      
        certificationType_ASC = 'certificationType_ASC',
        certificationType_DESC = 'certificationType_DESC',
      
        countryId_ASC = 'countryId_ASC',
        countryId_DESC = 'countryId_DESC',
      
        cityId_ASC = 'cityId_ASC',
        cityId_DESC = 'cityId_DESC',
      
    }

    registerEnumType(FarmOrderByEnum, {
      name: 'FarmOrderByInput'
    });
  
        
    @TypeGraphQLInputType()
    export class FarmWhereInput {
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          id_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        id_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          createdById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        createdById_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          updatedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        updatedById_in?: string[];
        
        @TypeGraphQLField({ nullable: true })
          deletedAt_all?: Boolean;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          deletedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        deletedById_in?: string[];
        
        @TypeGraphQLField(() => BigInt, { nullable: true })
        farmId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        farmId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        farmId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        farmId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        farmId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        farmId_in?: BN[];
      
          @TypeGraphQLField({ nullable: true })
          name_eq?: string;
        
          @TypeGraphQLField({ nullable: true })
          name_contains?: string;
        
          @TypeGraphQLField({ nullable: true })
          name_startsWith?: string;
        
          @TypeGraphQLField({ nullable: true })
          name_endsWith?: string;
        
          @TypeGraphQLField(() => [String], { nullable: true })
          name_in?: string[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        entityId_in?: BN[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        twinId_in?: BN[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        pricingPolicyId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        pricingPolicyId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        pricingPolicyId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        pricingPolicyId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        pricingPolicyId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        pricingPolicyId_in?: BN[];
      
          @TypeGraphQLField(() => CertificationType, { nullable: true })
          certificationType_eq?: CertificationType;
      
          @TypeGraphQLField(() => [CertificationType], { nullable: true })
          certificationType_in?: CertificationType[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        countryId_in?: BN[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        cityId_in?: BN[];
      
    }
  
        
    @TypeGraphQLInputType()
    export class FarmWhereUniqueInput {
      
        @TypeGraphQLField(() => ID)
        id?: string;
      
    }
  
        
    @TypeGraphQLInputType()
    export class FarmCreateInput {
      
          @TypeGraphQLField(() => BigInt, )
          farmId!: BN;
       
          @TypeGraphQLField()
          name!: string;
        
          @TypeGraphQLField(() => BigInt, )
          entityId!: BN;
       
          @TypeGraphQLField(() => BigInt, )
          twinId!: BN;
       
          @TypeGraphQLField(() => BigInt, )
          pricingPolicyId!: BN;
       
          @TypeGraphQLField(() => CertificationType, )
          certificationType!: CertificationType;
       
          @TypeGraphQLField(() => BigInt, { nullable: true })
          countryId?: BN;
       
          @TypeGraphQLField(() => BigInt, { nullable: true })
          cityId?: BN;
       
    }
  
        
    @TypeGraphQLInputType()
    export class FarmUpdateInput {
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        farmId?: BN;
      
        @TypeGraphQLField({ nullable: true })
        name?: string;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        pricingPolicyId?: BN;
      
        @TypeGraphQLField(() => CertificationType, { nullable: true })
        certificationType?: CertificationType;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId?: BN;
      
    }
  
        
    @ArgsType()
    export class FarmWhereArgs extends PaginationArgs {
      @TypeGraphQLField(() => FarmWhereInput, { nullable: true })
      where?: FarmWhereInput;

      @TypeGraphQLField(() => FarmOrderByEnum, { nullable: true })
      orderBy?: FarmOrderByEnum;
    }
  
        
    @ArgsType()
    export class FarmCreateManyArgs {
      @TypeGraphQLField(() => [FarmCreateInput])
      data!: FarmCreateInput[];
    }
  
        
    @ArgsType()
    export class FarmUpdateArgs {
      @TypeGraphQLField() data!: FarmUpdateInput;
      @TypeGraphQLField() where!: FarmWhereUniqueInput;
    }
  
      
        
    export enum ResourcesOrderByEnum {
      
        createdAt_ASC = 'createdAt_ASC',
        createdAt_DESC = 'createdAt_DESC',
      
        updatedAt_ASC = 'updatedAt_ASC',
        updatedAt_DESC = 'updatedAt_DESC',
      
        deletedAt_ASC = 'deletedAt_ASC',
        deletedAt_DESC = 'deletedAt_DESC',
      
        hru_ASC = 'hru_ASC',
        hru_DESC = 'hru_DESC',
      
        sru_ASC = 'sru_ASC',
        sru_DESC = 'sru_DESC',
      
        cru_ASC = 'cru_ASC',
        cru_DESC = 'cru_DESC',
      
        mru_ASC = 'mru_ASC',
        mru_DESC = 'mru_DESC',
      
    }

    registerEnumType(ResourcesOrderByEnum, {
      name: 'ResourcesOrderByInput'
    });
  
        
    @TypeGraphQLInputType()
    export class ResourcesWhereInput {
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          id_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        id_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          createdById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        createdById_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          updatedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        updatedById_in?: string[];
        
        @TypeGraphQLField({ nullable: true })
          deletedAt_all?: Boolean;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          deletedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        deletedById_in?: string[];
        
        @TypeGraphQLField(() => BigInt, { nullable: true })
        hru_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        hru_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        hru_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        hru_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        hru_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        hru_in?: BN[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        sru_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        sru_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        sru_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        sru_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        sru_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        sru_in?: BN[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cru_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cru_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cru_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cru_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cru_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        cru_in?: BN[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        mru_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        mru_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        mru_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        mru_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        mru_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        mru_in?: BN[];
      
    }
  
        
    @TypeGraphQLInputType()
    export class ResourcesWhereUniqueInput {
      
        @TypeGraphQLField(() => ID)
        id?: string;
      
    }
  
        
    @TypeGraphQLInputType()
    export class ResourcesCreateInput {
      
          @TypeGraphQLField(() => BigInt, { nullable: true })
          hru?: BN;
       
          @TypeGraphQLField(() => BigInt, { nullable: true })
          sru?: BN;
       
          @TypeGraphQLField(() => BigInt, { nullable: true })
          cru?: BN;
       
          @TypeGraphQLField(() => BigInt, { nullable: true })
          mru?: BN;
       
    }
  
        
    @TypeGraphQLInputType()
    export class ResourcesUpdateInput {
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        hru?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        sru?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cru?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        mru?: BN;
      
    }
  
        
    @ArgsType()
    export class ResourcesWhereArgs extends PaginationArgs {
      @TypeGraphQLField(() => ResourcesWhereInput, { nullable: true })
      where?: ResourcesWhereInput;

      @TypeGraphQLField(() => ResourcesOrderByEnum, { nullable: true })
      orderBy?: ResourcesOrderByEnum;
    }
  
        
    @ArgsType()
    export class ResourcesCreateManyArgs {
      @TypeGraphQLField(() => [ResourcesCreateInput])
      data!: ResourcesCreateInput[];
    }
  
        
    @ArgsType()
    export class ResourcesUpdateArgs {
      @TypeGraphQLField() data!: ResourcesUpdateInput;
      @TypeGraphQLField() where!: ResourcesWhereUniqueInput;
    }
  
      
        
    export enum NodeOrderByEnum {
      
        createdAt_ASC = 'createdAt_ASC',
        createdAt_DESC = 'createdAt_DESC',
      
        updatedAt_ASC = 'updatedAt_ASC',
        updatedAt_DESC = 'updatedAt_DESC',
      
        deletedAt_ASC = 'deletedAt_ASC',
        deletedAt_DESC = 'deletedAt_DESC',
      
        nodeId_ASC = 'nodeId_ASC',
        nodeId_DESC = 'nodeId_DESC',
      
        farmId_ASC = 'farmId_ASC',
        farmId_DESC = 'farmId_DESC',
      
        twinId_ASC = 'twinId_ASC',
        twinId_DESC = 'twinId_DESC',
      
        resourcesId_ASC = 'resourcesId_ASC',
        resourcesId_DESC = 'resourcesId_DESC',
      
        locationId_ASC = 'locationId_ASC',
        locationId_DESC = 'locationId_DESC',
      
        countryId_ASC = 'countryId_ASC',
        countryId_DESC = 'countryId_DESC',
      
        cityId_ASC = 'cityId_ASC',
        cityId_DESC = 'cityId_DESC',
      
    }

    registerEnumType(NodeOrderByEnum, {
      name: 'NodeOrderByInput'
    });
  
        
    @TypeGraphQLInputType()
    export class NodeWhereInput {
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          id_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        id_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          createdById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        createdById_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          updatedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        updatedById_in?: string[];
        
        @TypeGraphQLField({ nullable: true })
          deletedAt_all?: Boolean;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          deletedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        deletedById_in?: string[];
        
        @TypeGraphQLField(() => BigInt, { nullable: true })
        nodeId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        nodeId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        nodeId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        nodeId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        nodeId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        nodeId_in?: BN[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        farmId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        farmId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        farmId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        farmId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        farmId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        farmId_in?: BN[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        twinId_in?: BN[];
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          resourcesId_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        resourcesId_in?: string[];
        
          @TypeGraphQLField(() => ID,{ nullable: true })
          locationId_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        locationId_in?: string[];
        
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        countryId_in?: BN[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        cityId_in?: BN[];
      
    }
  
        
    @TypeGraphQLInputType()
    export class NodeWhereUniqueInput {
      
        @TypeGraphQLField(() => ID)
        id?: string;
      
    }
  
        
    @TypeGraphQLInputType()
    export class NodeCreateInput {
      
          @TypeGraphQLField(() => BigInt, )
          nodeId!: BN;
       
          @TypeGraphQLField(() => BigInt, )
          farmId!: BN;
       
          @TypeGraphQLField(() => BigInt, )
          twinId!: BN;
       
          @TypeGraphQLField(() => ID, )
          resourcesId!: string;
       
          @TypeGraphQLField(() => ID, )
          locationId!: string;
       
          @TypeGraphQLField(() => BigInt, { nullable: true })
          countryId?: BN;
       
          @TypeGraphQLField(() => BigInt, { nullable: true })
          cityId?: BN;
       
    }
  
        
    @TypeGraphQLInputType()
    export class NodeUpdateInput {
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        nodeId?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        farmId?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId?: BN;
      
        @TypeGraphQLField(() => ID, { nullable: true })
        resourcesId?: string;
      
        @TypeGraphQLField(() => ID, { nullable: true })
        locationId?: string;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        countryId?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cityId?: BN;
      
    }
  
        
    @ArgsType()
    export class NodeWhereArgs extends PaginationArgs {
      @TypeGraphQLField(() => NodeWhereInput, { nullable: true })
      where?: NodeWhereInput;

      @TypeGraphQLField(() => NodeOrderByEnum, { nullable: true })
      orderBy?: NodeOrderByEnum;
    }
  
        
    @ArgsType()
    export class NodeCreateManyArgs {
      @TypeGraphQLField(() => [NodeCreateInput])
      data!: NodeCreateInput[];
    }
  
        
    @ArgsType()
    export class NodeUpdateArgs {
      @TypeGraphQLField() data!: NodeUpdateInput;
      @TypeGraphQLField() where!: NodeWhereUniqueInput;
    }
  
      
        
    export enum LocationOrderByEnum {
      
        createdAt_ASC = 'createdAt_ASC',
        createdAt_DESC = 'createdAt_DESC',
      
        updatedAt_ASC = 'updatedAt_ASC',
        updatedAt_DESC = 'updatedAt_DESC',
      
        deletedAt_ASC = 'deletedAt_ASC',
        deletedAt_DESC = 'deletedAt_DESC',
      
        longitude_ASC = 'longitude_ASC',
        longitude_DESC = 'longitude_DESC',
      
        latitude_ASC = 'latitude_ASC',
        latitude_DESC = 'latitude_DESC',
      
    }

    registerEnumType(LocationOrderByEnum, {
      name: 'LocationOrderByInput'
    });
  
        
    @TypeGraphQLInputType()
    export class LocationWhereInput {
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          id_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        id_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          createdById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        createdById_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          updatedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        updatedById_in?: string[];
        
        @TypeGraphQLField({ nullable: true })
          deletedAt_all?: Boolean;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          deletedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        deletedById_in?: string[];
        
          @TypeGraphQLField({ nullable: true })
          longitude_eq?: string;
        
          @TypeGraphQLField({ nullable: true })
          longitude_contains?: string;
        
          @TypeGraphQLField({ nullable: true })
          longitude_startsWith?: string;
        
          @TypeGraphQLField({ nullable: true })
          longitude_endsWith?: string;
        
          @TypeGraphQLField(() => [String], { nullable: true })
          longitude_in?: string[];
      
          @TypeGraphQLField({ nullable: true })
          latitude_eq?: string;
        
          @TypeGraphQLField({ nullable: true })
          latitude_contains?: string;
        
          @TypeGraphQLField({ nullable: true })
          latitude_startsWith?: string;
        
          @TypeGraphQLField({ nullable: true })
          latitude_endsWith?: string;
        
          @TypeGraphQLField(() => [String], { nullable: true })
          latitude_in?: string[];
      
    }
  
        
    @TypeGraphQLInputType()
    export class LocationWhereUniqueInput {
      
        @TypeGraphQLField(() => ID)
        id?: string;
      
    }
  
        
    @TypeGraphQLInputType()
    export class LocationCreateInput {
      
          @TypeGraphQLField()
          longitude!: string;
        
          @TypeGraphQLField()
          latitude!: string;
        
    }
  
        
    @TypeGraphQLInputType()
    export class LocationUpdateInput {
      
        @TypeGraphQLField({ nullable: true })
        longitude?: string;
      
        @TypeGraphQLField({ nullable: true })
        latitude?: string;
      
    }
  
        
    @ArgsType()
    export class LocationWhereArgs extends PaginationArgs {
      @TypeGraphQLField(() => LocationWhereInput, { nullable: true })
      where?: LocationWhereInput;

      @TypeGraphQLField(() => LocationOrderByEnum, { nullable: true })
      orderBy?: LocationOrderByEnum;
    }
  
        
    @ArgsType()
    export class LocationCreateManyArgs {
      @TypeGraphQLField(() => [LocationCreateInput])
      data!: LocationCreateInput[];
    }
  
        
    @ArgsType()
    export class LocationUpdateArgs {
      @TypeGraphQLField() data!: LocationUpdateInput;
      @TypeGraphQLField() where!: LocationWhereUniqueInput;
    }
  
      
        
    export enum PricingPolicyOrderByEnum {
      
        createdAt_ASC = 'createdAt_ASC',
        createdAt_DESC = 'createdAt_DESC',
      
        updatedAt_ASC = 'updatedAt_ASC',
        updatedAt_DESC = 'updatedAt_DESC',
      
        deletedAt_ASC = 'deletedAt_ASC',
        deletedAt_DESC = 'deletedAt_DESC',
      
        pricingPolicyId_ASC = 'pricingPolicyId_ASC',
        pricingPolicyId_DESC = 'pricingPolicyId_DESC',
      
        name_ASC = 'name_ASC',
        name_DESC = 'name_DESC',
      
        currency_ASC = 'currency_ASC',
        currency_DESC = 'currency_DESC',
      
        su_ASC = 'su_ASC',
        su_DESC = 'su_DESC',
      
        cu_ASC = 'cu_ASC',
        cu_DESC = 'cu_DESC',
      
        nu_ASC = 'nu_ASC',
        nu_DESC = 'nu_DESC',
      
    }

    registerEnumType(PricingPolicyOrderByEnum, {
      name: 'PricingPolicyOrderByInput'
    });
  
        
    @TypeGraphQLInputType()
    export class PricingPolicyWhereInput {
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          id_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        id_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          createdById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        createdById_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          updatedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        updatedById_in?: string[];
        
        @TypeGraphQLField({ nullable: true })
          deletedAt_all?: Boolean;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          deletedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        deletedById_in?: string[];
        
        @TypeGraphQLField(() => BigInt, { nullable: true })
        pricingPolicyId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        pricingPolicyId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        pricingPolicyId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        pricingPolicyId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        pricingPolicyId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        pricingPolicyId_in?: BN[];
      
          @TypeGraphQLField({ nullable: true })
          name_eq?: string;
        
          @TypeGraphQLField({ nullable: true })
          name_contains?: string;
        
          @TypeGraphQLField({ nullable: true })
          name_startsWith?: string;
        
          @TypeGraphQLField({ nullable: true })
          name_endsWith?: string;
        
          @TypeGraphQLField(() => [String], { nullable: true })
          name_in?: string[];
      
          @TypeGraphQLField({ nullable: true })
          currency_eq?: string;
        
          @TypeGraphQLField({ nullable: true })
          currency_contains?: string;
        
          @TypeGraphQLField({ nullable: true })
          currency_startsWith?: string;
        
          @TypeGraphQLField({ nullable: true })
          currency_endsWith?: string;
        
          @TypeGraphQLField(() => [String], { nullable: true })
          currency_in?: string[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        su_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        su_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        su_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        su_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        su_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        su_in?: BN[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cu_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cu_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cu_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cu_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cu_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        cu_in?: BN[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        nu_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        nu_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        nu_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        nu_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        nu_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        nu_in?: BN[];
      
    }
  
        
    @TypeGraphQLInputType()
    export class PricingPolicyWhereUniqueInput {
      
        @TypeGraphQLField(() => ID)
        id?: string;
      
    }
  
        
    @TypeGraphQLInputType()
    export class PricingPolicyCreateInput {
      
          @TypeGraphQLField(() => BigInt, )
          pricingPolicyId!: BN;
       
          @TypeGraphQLField()
          name!: string;
        
          @TypeGraphQLField()
          currency!: string;
        
          @TypeGraphQLField(() => BigInt, )
          su!: BN;
       
          @TypeGraphQLField(() => BigInt, )
          cu!: BN;
       
          @TypeGraphQLField(() => BigInt, )
          nu!: BN;
       
    }
  
        
    @TypeGraphQLInputType()
    export class PricingPolicyUpdateInput {
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        pricingPolicyId?: BN;
      
        @TypeGraphQLField({ nullable: true })
        name?: string;
      
        @TypeGraphQLField({ nullable: true })
        currency?: string;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        su?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        cu?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        nu?: BN;
      
    }
  
        
    @ArgsType()
    export class PricingPolicyWhereArgs extends PaginationArgs {
      @TypeGraphQLField(() => PricingPolicyWhereInput, { nullable: true })
      where?: PricingPolicyWhereInput;

      @TypeGraphQLField(() => PricingPolicyOrderByEnum, { nullable: true })
      orderBy?: PricingPolicyOrderByEnum;
    }
  
        
    @ArgsType()
    export class PricingPolicyCreateManyArgs {
      @TypeGraphQLField(() => [PricingPolicyCreateInput])
      data!: PricingPolicyCreateInput[];
    }
  
        
    @ArgsType()
    export class PricingPolicyUpdateArgs {
      @TypeGraphQLField() data!: PricingPolicyUpdateInput;
      @TypeGraphQLField() where!: PricingPolicyWhereUniqueInput;
    }
  
      
        
    export enum TransferOrderByEnum {
      
        createdAt_ASC = 'createdAt_ASC',
        createdAt_DESC = 'createdAt_DESC',
      
        updatedAt_ASC = 'updatedAt_ASC',
        updatedAt_DESC = 'updatedAt_DESC',
      
        deletedAt_ASC = 'deletedAt_ASC',
        deletedAt_DESC = 'deletedAt_DESC',
      
        from_ASC = 'from_ASC',
        from_DESC = 'from_DESC',
      
        to_ASC = 'to_ASC',
        to_DESC = 'to_DESC',
      
        value_ASC = 'value_ASC',
        value_DESC = 'value_DESC',
      
        comment_ASC = 'comment_ASC',
        comment_DESC = 'comment_DESC',
      
        block_ASC = 'block_ASC',
        block_DESC = 'block_DESC',
      
    }

    registerEnumType(TransferOrderByEnum, {
      name: 'TransferOrderByInput'
    });
  
        
    @TypeGraphQLInputType()
    export class TransferWhereInput {
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          id_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        id_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          createdById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        createdById_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          updatedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        updatedById_in?: string[];
        
        @TypeGraphQLField({ nullable: true })
          deletedAt_all?: Boolean;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          deletedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        deletedById_in?: string[];
        
          @TypeGraphQLField(() => Bytes, { nullable: true })
          from_eq?: Buffer;
        
          @TypeGraphQLField(() => [Bytes], { nullable: true })
          from_in?: Buffer[];
      
          @TypeGraphQLField(() => Bytes, { nullable: true })
          to_eq?: Buffer;
        
          @TypeGraphQLField(() => [Bytes], { nullable: true })
          to_in?: Buffer[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        value_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        value_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        value_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        value_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        value_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        value_in?: BN[];
      
          @TypeGraphQLField({ nullable: true })
          comment_eq?: string;
        
          @TypeGraphQLField({ nullable: true })
          comment_contains?: string;
        
          @TypeGraphQLField({ nullable: true })
          comment_startsWith?: string;
        
          @TypeGraphQLField({ nullable: true })
          comment_endsWith?: string;
        
          @TypeGraphQLField(() => [String], { nullable: true })
          comment_in?: string[];
      
        @TypeGraphQLField(() => Int, { nullable: true })
        block_eq?: number;
      
        @TypeGraphQLField(() => Int, { nullable: true })
        block_gt?: number;
      
        @TypeGraphQLField(() => Int, { nullable: true })
        block_gte?: number;
      
        @TypeGraphQLField(() => Int, { nullable: true })
        block_lt?: number;
      
        @TypeGraphQLField(() => Int, { nullable: true })
        block_lte?: number;
      
        @TypeGraphQLField(() => [Int], { nullable: true })
        block_in?: number[];
      
    }
  
        
    @TypeGraphQLInputType()
    export class TransferWhereUniqueInput {
      
        @TypeGraphQLField(() => ID)
        id?: string;
      
    }
  
        
    @TypeGraphQLInputType()
    export class TransferCreateInput {
      
          @TypeGraphQLField(() => Bytes, )
          from!: Buffer;
       
          @TypeGraphQLField(() => Bytes, )
          to!: Buffer;
       
          @TypeGraphQLField(() => BigInt, )
          value!: BN;
       
          @TypeGraphQLField({ nullable: true })
          comment?: string;
        
          @TypeGraphQLField()
          block!: number;
        
    }
  
        
    @TypeGraphQLInputType()
    export class TransferUpdateInput {
      
        @TypeGraphQLField(() => Bytes, { nullable: true })
        from?: Buffer;
      
        @TypeGraphQLField(() => Bytes, { nullable: true })
        to?: Buffer;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        value?: BN;
      
        @TypeGraphQLField({ nullable: true })
        comment?: string;
      
        @TypeGraphQLField({ nullable: true })
        block?: number;
      
    }
  
        
    @ArgsType()
    export class TransferWhereArgs extends PaginationArgs {
      @TypeGraphQLField(() => TransferWhereInput, { nullable: true })
      where?: TransferWhereInput;

      @TypeGraphQLField(() => TransferOrderByEnum, { nullable: true })
      orderBy?: TransferOrderByEnum;
    }
  
        
    @ArgsType()
    export class TransferCreateManyArgs {
      @TypeGraphQLField(() => [TransferCreateInput])
      data!: TransferCreateInput[];
    }
  
        
    @ArgsType()
    export class TransferUpdateArgs {
      @TypeGraphQLField() data!: TransferUpdateInput;
      @TypeGraphQLField() where!: TransferWhereUniqueInput;
    }
  
      
        
    export enum TwinOrderByEnum {
      
        createdAt_ASC = 'createdAt_ASC',
        createdAt_DESC = 'createdAt_DESC',
      
        updatedAt_ASC = 'updatedAt_ASC',
        updatedAt_DESC = 'updatedAt_DESC',
      
        deletedAt_ASC = 'deletedAt_ASC',
        deletedAt_DESC = 'deletedAt_DESC',
      
        twinId_ASC = 'twinId_ASC',
        twinId_DESC = 'twinId_DESC',
      
        pubKey_ASC = 'pubKey_ASC',
        pubKey_DESC = 'pubKey_DESC',
      
        entityId_ASC = 'entityId_ASC',
        entityId_DESC = 'entityId_DESC',
      
    }

    registerEnumType(TwinOrderByEnum, {
      name: 'TwinOrderByInput'
    });
  
        
    @TypeGraphQLInputType()
    export class TwinWhereInput {
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          id_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        id_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          createdAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          createdById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        createdById_in?: string[];
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          updatedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          updatedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        updatedById_in?: string[];
        
        @TypeGraphQLField({ nullable: true })
          deletedAt_all?: Boolean;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_eq?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_lte?: Date;
           
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gt?: Date;
        
          @TypeGraphQLField(() => DateTime, { nullable: true })
          deletedAt_gte?: Date;
      
          @TypeGraphQLField(() => ID,{ nullable: true })
          deletedById_eq?: string;
        
        @TypeGraphQLField(() => [ID], { nullable: true })
        deletedById_in?: string[];
        
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        twinId_in?: BN[];
      
          @TypeGraphQLField({ nullable: true })
          pubKey_eq?: string;
        
          @TypeGraphQLField({ nullable: true })
          pubKey_contains?: string;
        
          @TypeGraphQLField({ nullable: true })
          pubKey_startsWith?: string;
        
          @TypeGraphQLField({ nullable: true })
          pubKey_endsWith?: string;
        
          @TypeGraphQLField(() => [String], { nullable: true })
          pubKey_in?: string[];
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_eq?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_gt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_gte?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_lt?: BN;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId_lte?: BN;
      
        @TypeGraphQLField(() => [BigInt], { nullable: true })
        entityId_in?: BN[];
      
    }
  
        
    @TypeGraphQLInputType()
    export class TwinWhereUniqueInput {
      
        @TypeGraphQLField(() => ID)
        id?: string;
      
    }
  
        
    @TypeGraphQLInputType()
    export class TwinCreateInput {
      
          @TypeGraphQLField(() => BigInt, )
          twinId!: BN;
       
          @TypeGraphQLField()
          pubKey!: string;
        
          @TypeGraphQLField(() => BigInt, )
          entityId!: BN;
       
    }
  
        
    @TypeGraphQLInputType()
    export class TwinUpdateInput {
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        twinId?: BN;
      
        @TypeGraphQLField({ nullable: true })
        pubKey?: string;
      
        @TypeGraphQLField(() => BigInt, { nullable: true })
        entityId?: BN;
      
    }
  
        
    @ArgsType()
    export class TwinWhereArgs extends PaginationArgs {
      @TypeGraphQLField(() => TwinWhereInput, { nullable: true })
      where?: TwinWhereInput;

      @TypeGraphQLField(() => TwinOrderByEnum, { nullable: true })
      orderBy?: TwinOrderByEnum;
    }
  
        
    @ArgsType()
    export class TwinCreateManyArgs {
      @TypeGraphQLField(() => [TwinCreateInput])
      data!: TwinCreateInput[];
    }
  
        
    @ArgsType()
    export class TwinUpdateArgs {
      @TypeGraphQLField() data!: TwinUpdateInput;
      @TypeGraphQLField() where!: TwinWhereUniqueInput;
    }
  
      