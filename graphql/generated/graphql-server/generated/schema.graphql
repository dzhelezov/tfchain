interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

"""GraphQL representation of BigInt"""
scalar BigInt

enum CertificationType {
  Diy
  Certified
}

type City implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  countryId: Int!
  name: String!
}

type CityConnection {
  totalCount: Int!
  edges: [CityEdge!]!
  pageInfo: PageInfo!
}

input CityCreateInput {
  countryId: Float!
  name: String!
}

type CityEdge {
  node: City!
  cursor: String!
}

enum CityOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  countryId_ASC
  countryId_DESC
  name_ASC
  name_DESC
}

input CityUpdateInput {
  countryId: Float
  name: String
}

input CityWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  countryId_eq: Int
  countryId_gt: Int
  countryId_gte: Int
  countryId_lt: Int
  countryId_lte: Int
  countryId_in: [Int!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
}

input CityWhereUniqueInput {
  id: ID!
}

type CommentSearchFTSOutput {
  item: CommentSearchSearchResult!
  rank: Float!
  isTypeOf: String!
  highlight: String!
}

union CommentSearchSearchResult = Transfer

type Consumption implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  contractId: Int!
  timestamp: Int!
  cru: Int!
  sru: Int!
  hru: Int!
  mru: Int!
  nru: Int!
}

type ConsumptionConnection {
  totalCount: Int!
  edges: [ConsumptionEdge!]!
  pageInfo: PageInfo!
}

input ConsumptionCreateInput {
  contractId: Float!
  timestamp: Float!
  cru: Float!
  sru: Float!
  hru: Float!
  mru: Float!
  nru: Float!
}

type ConsumptionEdge {
  node: Consumption!
  cursor: String!
}

enum ConsumptionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  contractId_ASC
  contractId_DESC
  timestamp_ASC
  timestamp_DESC
  cru_ASC
  cru_DESC
  sru_ASC
  sru_DESC
  hru_ASC
  hru_DESC
  mru_ASC
  mru_DESC
  nru_ASC
  nru_DESC
}

input ConsumptionUpdateInput {
  contractId: Float
  timestamp: Float
  cru: Float
  sru: Float
  hru: Float
  mru: Float
  nru: Float
}

input ConsumptionWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  contractId_eq: Int
  contractId_gt: Int
  contractId_gte: Int
  contractId_lt: Int
  contractId_lte: Int
  contractId_in: [Int!]
  timestamp_eq: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  cru_eq: Int
  cru_gt: Int
  cru_gte: Int
  cru_lt: Int
  cru_lte: Int
  cru_in: [Int!]
  sru_eq: Int
  sru_gt: Int
  sru_gte: Int
  sru_lt: Int
  sru_lte: Int
  sru_in: [Int!]
  hru_eq: Int
  hru_gt: Int
  hru_gte: Int
  hru_lt: Int
  hru_lte: Int
  hru_in: [Int!]
  mru_eq: Int
  mru_gt: Int
  mru_gte: Int
  mru_lt: Int
  mru_lte: Int
  mru_in: [Int!]
  nru_eq: Int
  nru_gt: Int
  nru_gte: Int
  nru_lt: Int
  nru_lte: Int
  nru_in: [Int!]
  AND: [ConsumptionWhereInput!]
  OR: [ConsumptionWhereInput!]
}

input ConsumptionWhereUniqueInput {
  id: ID!
}

type ContractBillReport implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  contractId: Int!
  discountReceived: String!
  amountBilled: Int!
}

type ContractBillReportConnection {
  totalCount: Int!
  edges: [ContractBillReportEdge!]!
  pageInfo: PageInfo!
}

input ContractBillReportCreateInput {
  contractId: Float!
  discountReceived: String!
  amountBilled: Float!
}

type ContractBillReportEdge {
  node: ContractBillReport!
  cursor: String!
}

enum ContractBillReportOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  contractId_ASC
  contractId_DESC
  discountReceived_ASC
  discountReceived_DESC
  amountBilled_ASC
  amountBilled_DESC
}

input ContractBillReportUpdateInput {
  contractId: Float
  discountReceived: String
  amountBilled: Float
}

input ContractBillReportWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  contractId_eq: Int
  contractId_gt: Int
  contractId_gte: Int
  contractId_lt: Int
  contractId_lte: Int
  contractId_in: [Int!]
  discountReceived_eq: String
  discountReceived_contains: String
  discountReceived_startsWith: String
  discountReceived_endsWith: String
  discountReceived_in: [String!]
  amountBilled_eq: Int
  amountBilled_gt: Int
  amountBilled_gte: Int
  amountBilled_lt: Int
  amountBilled_lte: Int
  amountBilled_in: [Int!]
  AND: [ContractBillReportWhereInput!]
  OR: [ContractBillReportWhereInput!]
}

input ContractBillReportWhereUniqueInput {
  id: ID!
}

enum ContractState {
  Created
  Deleted
  OutOfFunds
}

type Country implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  code: String!
  name: String!
  region: String!
  subregion: String!
}

type CountryConnection {
  totalCount: Int!
  edges: [CountryEdge!]!
  pageInfo: PageInfo!
}

input CountryCreateInput {
  code: String!
  name: String!
  region: String!
  subregion: String!
}

type CountryEdge {
  node: Country!
  cursor: String!
}

enum CountryOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  code_ASC
  code_DESC
  name_ASC
  name_DESC
  region_ASC
  region_DESC
  subregion_ASC
  subregion_DESC
}

input CountryUpdateInput {
  code: String
  name: String
  region: String
  subregion: String
}

input CountryWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  code_eq: String
  code_contains: String
  code_startsWith: String
  code_endsWith: String
  code_in: [String!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  region_eq: String
  region_contains: String
  region_startsWith: String
  region_endsWith: String
  region_in: [String!]
  subregion_eq: String
  subregion_contains: String
  subregion_startsWith: String
  subregion_endsWith: String
  subregion_in: [String!]
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
}

input CountryWhereUniqueInput {
  id: ID!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type Entity implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  gridVersion: Int!
  entityId: Int!
  name: String!
  countryId: Int
  cityId: Int
  accountId: String!
}

type EntityConnection {
  totalCount: Int!
  edges: [EntityEdge!]!
  pageInfo: PageInfo!
}

input EntityCreateInput {
  gridVersion: Float!
  entityId: Float!
  name: String!
  countryId: Float
  cityId: Float
  accountId: String!
}

type EntityEdge {
  node: Entity!
  cursor: String!
}

enum EntityOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  gridVersion_ASC
  gridVersion_DESC
  entityId_ASC
  entityId_DESC
  name_ASC
  name_DESC
  countryId_ASC
  countryId_DESC
  cityId_ASC
  cityId_DESC
  accountId_ASC
  accountId_DESC
}

type EntityProof implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  entityId: Int!
  signature: String!
  twinRel: Twin!
  twinRelId: String!
}

type EntityProofConnection {
  totalCount: Int!
  edges: [EntityProofEdge!]!
  pageInfo: PageInfo!
}

input EntityProofCreateInput {
  entityId: Float!
  signature: String!
  twinRel: ID!
}

type EntityProofEdge {
  node: EntityProof!
  cursor: String!
}

enum EntityProofOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  entityId_ASC
  entityId_DESC
  signature_ASC
  signature_DESC
  twinRel_ASC
  twinRel_DESC
}

input EntityProofUpdateInput {
  entityId: Float
  signature: String
  twinRel: ID
}

input EntityProofWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  entityId_eq: Int
  entityId_gt: Int
  entityId_gte: Int
  entityId_lt: Int
  entityId_lte: Int
  entityId_in: [Int!]
  signature_eq: String
  signature_contains: String
  signature_startsWith: String
  signature_endsWith: String
  signature_in: [String!]
  twinRel_eq: ID
  twinRel_in: [ID!]
  twinRel: TwinWhereInput
  AND: [EntityProofWhereInput!]
  OR: [EntityProofWhereInput!]
}

input EntityProofWhereUniqueInput {
  id: ID!
}

input EntityUpdateInput {
  gridVersion: Float
  entityId: Float
  name: String
  countryId: Float
  cityId: Float
  accountId: String
}

input EntityWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  gridVersion_eq: Int
  gridVersion_gt: Int
  gridVersion_gte: Int
  gridVersion_lt: Int
  gridVersion_lte: Int
  gridVersion_in: [Int!]
  entityId_eq: Int
  entityId_gt: Int
  entityId_gte: Int
  entityId_lt: Int
  entityId_lte: Int
  entityId_in: [Int!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  countryId_eq: Int
  countryId_gt: Int
  countryId_gte: Int
  countryId_lt: Int
  countryId_lte: Int
  countryId_in: [Int!]
  cityId_eq: Int
  cityId_gt: Int
  cityId_gte: Int
  cityId_lt: Int
  cityId_lte: Int
  cityId_in: [Int!]
  accountId_eq: String
  accountId_contains: String
  accountId_startsWith: String
  accountId_endsWith: String
  accountId_in: [String!]
  AND: [EntityWhereInput!]
  OR: [EntityWhereInput!]
}

input EntityWhereUniqueInput {
  id: ID!
}

type Farm implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  gridVersion: Int!
  farmId: Int!
  name: String!
  twinId: Int!
  pricingPolicyId: Int!
  certificationType: CertificationType!
  countryId: Int
  cityId: Int
  publicIPs: [PublicIp!]!
}

type FarmConnection {
  totalCount: Int!
  edges: [FarmEdge!]!
  pageInfo: PageInfo!
}

input FarmCreateInput {
  gridVersion: Float!
  farmId: Float!
  name: String!
  twinId: Float!
  pricingPolicyId: Float!
  certificationType: CertificationType!
  countryId: Float
  cityId: Float
}

type FarmEdge {
  node: Farm!
  cursor: String!
}

enum FarmOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  gridVersion_ASC
  gridVersion_DESC
  farmId_ASC
  farmId_DESC
  name_ASC
  name_DESC
  twinId_ASC
  twinId_DESC
  pricingPolicyId_ASC
  pricingPolicyId_DESC
  certificationType_ASC
  certificationType_DESC
  countryId_ASC
  countryId_DESC
  cityId_ASC
  cityId_DESC
}

input FarmUpdateInput {
  gridVersion: Float
  farmId: Float
  name: String
  twinId: Float
  pricingPolicyId: Float
  certificationType: CertificationType
  countryId: Float
  cityId: Float
}

input FarmWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  gridVersion_eq: Int
  gridVersion_gt: Int
  gridVersion_gte: Int
  gridVersion_lt: Int
  gridVersion_lte: Int
  gridVersion_in: [Int!]
  farmId_eq: Int
  farmId_gt: Int
  farmId_gte: Int
  farmId_lt: Int
  farmId_lte: Int
  farmId_in: [Int!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  twinId_eq: Int
  twinId_gt: Int
  twinId_gte: Int
  twinId_lt: Int
  twinId_lte: Int
  twinId_in: [Int!]
  pricingPolicyId_eq: Int
  pricingPolicyId_gt: Int
  pricingPolicyId_gte: Int
  pricingPolicyId_lt: Int
  pricingPolicyId_lte: Int
  pricingPolicyId_in: [Int!]
  certificationType_eq: CertificationType
  certificationType_in: [CertificationType!]
  countryId_eq: Int
  countryId_gt: Int
  countryId_gte: Int
  countryId_lt: Int
  countryId_lte: Int
  countryId_in: [Int!]
  cityId_eq: Int
  cityId_gt: Int
  cityId_gte: Int
  cityId_lt: Int
  cityId_lte: Int
  cityId_in: [Int!]
  publicIPs_none: PublicIpWhereInput
  publicIPs_some: PublicIpWhereInput
  publicIPs_every: PublicIpWhereInput
  AND: [FarmWhereInput!]
  OR: [FarmWhereInput!]
}

input FarmWhereUniqueInput {
  id: ID!
}

type Location implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  longitude: String!
  latitude: String!
  nodelocation: [Node!]
}

type LocationConnection {
  totalCount: Int!
  edges: [LocationEdge!]!
  pageInfo: PageInfo!
}

input LocationCreateInput {
  longitude: String!
  latitude: String!
}

type LocationEdge {
  node: Location!
  cursor: String!
}

enum LocationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  longitude_ASC
  longitude_DESC
  latitude_ASC
  latitude_DESC
}

input LocationUpdateInput {
  longitude: String
  latitude: String
}

input LocationWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  longitude_eq: String
  longitude_contains: String
  longitude_startsWith: String
  longitude_endsWith: String
  longitude_in: [String!]
  latitude_eq: String
  latitude_contains: String
  latitude_startsWith: String
  latitude_endsWith: String
  latitude_in: [String!]
  nodelocation_none: NodeWhereInput
  nodelocation_some: NodeWhereInput
  nodelocation_every: NodeWhereInput
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
}

input LocationWhereUniqueInput {
  id: ID!
}

type Node implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  gridVersion: Int!
  nodeId: Int!
  farmId: Int!
  twinId: Int!
  location: Location!
  locationId: String!
  countryId: Int
  cityId: Int
  hru: BigInt
  sru: BigInt
  cru: BigInt
  mru: BigInt
  publicConfig: PublicConfig
  publicConfigId: String
}

type NodeConnection {
  totalCount: Int!
  edges: [NodeEdge!]!
  pageInfo: PageInfo!
}

type NodeContract implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  contractId: Int!
  twinId: Int!
  nodeId: Int!
  deploymentData: String!
  deploymentHash: String!
  numberOfPublicIPs: Int!
  state: ContractState!
}

type NodeContractConnection {
  totalCount: Int!
  edges: [NodeContractEdge!]!
  pageInfo: PageInfo!
}

input NodeContractCreateInput {
  version: Float!
  contractId: Float!
  twinId: Float!
  nodeId: Float!
  deploymentData: String!
  deploymentHash: String!
  numberOfPublicIPs: Float!
  state: ContractState!
}

type NodeContractEdge {
  node: NodeContract!
  cursor: String!
}

enum NodeContractOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  version_ASC
  version_DESC
  contractId_ASC
  contractId_DESC
  twinId_ASC
  twinId_DESC
  nodeId_ASC
  nodeId_DESC
  deploymentData_ASC
  deploymentData_DESC
  deploymentHash_ASC
  deploymentHash_DESC
  numberOfPublicIPs_ASC
  numberOfPublicIPs_DESC
  state_ASC
  state_DESC
}

input NodeContractUpdateInput {
  version: Float
  contractId: Float
  twinId: Float
  nodeId: Float
  deploymentData: String
  deploymentHash: String
  numberOfPublicIPs: Float
  state: ContractState
}

input NodeContractWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  version_eq: Int
  version_gt: Int
  version_gte: Int
  version_lt: Int
  version_lte: Int
  version_in: [Int!]
  contractId_eq: Int
  contractId_gt: Int
  contractId_gte: Int
  contractId_lt: Int
  contractId_lte: Int
  contractId_in: [Int!]
  twinId_eq: Int
  twinId_gt: Int
  twinId_gte: Int
  twinId_lt: Int
  twinId_lte: Int
  twinId_in: [Int!]
  nodeId_eq: Int
  nodeId_gt: Int
  nodeId_gte: Int
  nodeId_lt: Int
  nodeId_lte: Int
  nodeId_in: [Int!]
  deploymentData_eq: String
  deploymentData_contains: String
  deploymentData_startsWith: String
  deploymentData_endsWith: String
  deploymentData_in: [String!]
  deploymentHash_eq: String
  deploymentHash_contains: String
  deploymentHash_startsWith: String
  deploymentHash_endsWith: String
  deploymentHash_in: [String!]
  numberOfPublicIPs_eq: Int
  numberOfPublicIPs_gt: Int
  numberOfPublicIPs_gte: Int
  numberOfPublicIPs_lt: Int
  numberOfPublicIPs_lte: Int
  numberOfPublicIPs_in: [Int!]
  state_eq: ContractState
  state_in: [ContractState!]
  AND: [NodeContractWhereInput!]
  OR: [NodeContractWhereInput!]
}

input NodeContractWhereUniqueInput {
  id: ID!
}

input NodeCreateInput {
  gridVersion: Float!
  nodeId: Float!
  farmId: Float!
  twinId: Float!
  location: ID!
  countryId: Float
  cityId: Float
  hru: BigInt
  sru: BigInt
  cru: BigInt
  mru: BigInt
  publicConfig: ID
}

type NodeEdge {
  node: Node!
  cursor: String!
}

enum NodeOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  gridVersion_ASC
  gridVersion_DESC
  nodeId_ASC
  nodeId_DESC
  farmId_ASC
  farmId_DESC
  twinId_ASC
  twinId_DESC
  location_ASC
  location_DESC
  countryId_ASC
  countryId_DESC
  cityId_ASC
  cityId_DESC
  hru_ASC
  hru_DESC
  sru_ASC
  sru_DESC
  cru_ASC
  cru_DESC
  mru_ASC
  mru_DESC
  publicConfig_ASC
  publicConfig_DESC
}

input NodeUpdateInput {
  gridVersion: Float
  nodeId: Float
  farmId: Float
  twinId: Float
  location: ID
  countryId: Float
  cityId: Float
  hru: BigInt
  sru: BigInt
  cru: BigInt
  mru: BigInt
  publicConfig: ID
}

input NodeWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  gridVersion_eq: Int
  gridVersion_gt: Int
  gridVersion_gte: Int
  gridVersion_lt: Int
  gridVersion_lte: Int
  gridVersion_in: [Int!]
  nodeId_eq: Int
  nodeId_gt: Int
  nodeId_gte: Int
  nodeId_lt: Int
  nodeId_lte: Int
  nodeId_in: [Int!]
  farmId_eq: Int
  farmId_gt: Int
  farmId_gte: Int
  farmId_lt: Int
  farmId_lte: Int
  farmId_in: [Int!]
  twinId_eq: Int
  twinId_gt: Int
  twinId_gte: Int
  twinId_lt: Int
  twinId_lte: Int
  twinId_in: [Int!]
  location_eq: ID
  location_in: [ID!]
  countryId_eq: Int
  countryId_gt: Int
  countryId_gte: Int
  countryId_lt: Int
  countryId_lte: Int
  countryId_in: [Int!]
  cityId_eq: Int
  cityId_gt: Int
  cityId_gte: Int
  cityId_lt: Int
  cityId_lte: Int
  cityId_in: [Int!]
  hru_eq: BigInt
  hru_gt: BigInt
  hru_gte: BigInt
  hru_lt: BigInt
  hru_lte: BigInt
  hru_in: [BigInt!]
  sru_eq: BigInt
  sru_gt: BigInt
  sru_gte: BigInt
  sru_lt: BigInt
  sru_lte: BigInt
  sru_in: [BigInt!]
  cru_eq: BigInt
  cru_gt: BigInt
  cru_gte: BigInt
  cru_lt: BigInt
  cru_lte: BigInt
  cru_in: [BigInt!]
  mru_eq: BigInt
  mru_gt: BigInt
  mru_gte: BigInt
  mru_lt: BigInt
  mru_lte: BigInt
  mru_in: [BigInt!]
  publicConfig_eq: ID
  publicConfig_in: [ID!]
  location: LocationWhereInput
  publicConfig: PublicConfigWhereInput
  AND: [NodeWhereInput!]
  OR: [NodeWhereInput!]
}

input NodeWhereUniqueInput {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PricingPolicy implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  gridVersion: Int!
  pricingPolicyId: Int!
  name: String!
  currency: String!
  su: Int!
  cu: Int!
  nu: Int!
}

type PricingPolicyConnection {
  totalCount: Int!
  edges: [PricingPolicyEdge!]!
  pageInfo: PageInfo!
}

input PricingPolicyCreateInput {
  gridVersion: Float!
  pricingPolicyId: Float!
  name: String!
  currency: String!
  su: Float!
  cu: Float!
  nu: Float!
}

type PricingPolicyEdge {
  node: PricingPolicy!
  cursor: String!
}

enum PricingPolicyOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  gridVersion_ASC
  gridVersion_DESC
  pricingPolicyId_ASC
  pricingPolicyId_DESC
  name_ASC
  name_DESC
  currency_ASC
  currency_DESC
  su_ASC
  su_DESC
  cu_ASC
  cu_DESC
  nu_ASC
  nu_DESC
}

input PricingPolicyUpdateInput {
  gridVersion: Float
  pricingPolicyId: Float
  name: String
  currency: String
  su: Float
  cu: Float
  nu: Float
}

input PricingPolicyWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  gridVersion_eq: Int
  gridVersion_gt: Int
  gridVersion_gte: Int
  gridVersion_lt: Int
  gridVersion_lte: Int
  gridVersion_in: [Int!]
  pricingPolicyId_eq: Int
  pricingPolicyId_gt: Int
  pricingPolicyId_gte: Int
  pricingPolicyId_lt: Int
  pricingPolicyId_lte: Int
  pricingPolicyId_in: [Int!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  currency_eq: String
  currency_contains: String
  currency_startsWith: String
  currency_endsWith: String
  currency_in: [String!]
  su_eq: Int
  su_gt: Int
  su_gte: Int
  su_lt: Int
  su_lte: Int
  su_in: [Int!]
  cu_eq: Int
  cu_gt: Int
  cu_gte: Int
  cu_lt: Int
  cu_lte: Int
  cu_in: [Int!]
  nu_eq: Int
  nu_gt: Int
  nu_gte: Int
  nu_lt: Int
  nu_lte: Int
  nu_in: [Int!]
  AND: [PricingPolicyWhereInput!]
  OR: [PricingPolicyWhereInput!]
}

input PricingPolicyWhereUniqueInput {
  id: ID!
}

type ProcessorState {
  lastCompleteBlock: Float!
  lastProcessedEvent: String!
  indexerHead: Float!
  chainHead: Float!
}

type PublicConfig implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  ipv4: String!
  ipv6: String!
  gw4: String!
  gw6: String!
  nodepublicConfig: [Node!]
}

type PublicConfigConnection {
  totalCount: Int!
  edges: [PublicConfigEdge!]!
  pageInfo: PageInfo!
}

input PublicConfigCreateInput {
  ipv4: String!
  ipv6: String!
  gw4: String!
  gw6: String!
}

type PublicConfigEdge {
  node: PublicConfig!
  cursor: String!
}

enum PublicConfigOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  ipv4_ASC
  ipv4_DESC
  ipv6_ASC
  ipv6_DESC
  gw4_ASC
  gw4_DESC
  gw6_ASC
  gw6_DESC
}

input PublicConfigUpdateInput {
  ipv4: String
  ipv6: String
  gw4: String
  gw6: String
}

input PublicConfigWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  ipv4_eq: String
  ipv4_contains: String
  ipv4_startsWith: String
  ipv4_endsWith: String
  ipv4_in: [String!]
  ipv6_eq: String
  ipv6_contains: String
  ipv6_startsWith: String
  ipv6_endsWith: String
  ipv6_in: [String!]
  gw4_eq: String
  gw4_contains: String
  gw4_startsWith: String
  gw4_endsWith: String
  gw4_in: [String!]
  gw6_eq: String
  gw6_contains: String
  gw6_startsWith: String
  gw6_endsWith: String
  gw6_in: [String!]
  nodepublicConfig_none: NodeWhereInput
  nodepublicConfig_some: NodeWhereInput
  nodepublicConfig_every: NodeWhereInput
  AND: [PublicConfigWhereInput!]
  OR: [PublicConfigWhereInput!]
}

input PublicConfigWhereUniqueInput {
  id: ID!
}

type PublicIp implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  farm: Farm
  farmId: String
  gateway: String!
  ip: String!
  contractId: Int!
}

type PublicIpConnection {
  totalCount: Int!
  edges: [PublicIpEdge!]!
  pageInfo: PageInfo!
}

input PublicIpCreateInput {
  farm: ID
  gateway: String!
  ip: String!
  contractId: Float!
}

type PublicIpEdge {
  node: PublicIp!
  cursor: String!
}

enum PublicIpOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  farm_ASC
  farm_DESC
  gateway_ASC
  gateway_DESC
  ip_ASC
  ip_DESC
  contractId_ASC
  contractId_DESC
}

input PublicIpUpdateInput {
  farm: ID
  gateway: String
  ip: String
  contractId: Float
}

input PublicIpWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  farm_eq: ID
  farm_in: [ID!]
  gateway_eq: String
  gateway_contains: String
  gateway_startsWith: String
  gateway_endsWith: String
  gateway_in: [String!]
  ip_eq: String
  ip_contains: String
  ip_startsWith: String
  ip_endsWith: String
  ip_in: [String!]
  contractId_eq: Int
  contractId_gt: Int
  contractId_gte: Int
  contractId_lt: Int
  contractId_lte: Int
  contractId_in: [Int!]
  farm: FarmWhereInput
  AND: [PublicIpWhereInput!]
  OR: [PublicIpWhereInput!]
}

input PublicIpWhereUniqueInput {
  id: ID!
}

type Query {
  cities(offset: Int, limit: Int = 50, where: CityWhereInput, orderBy: [CityOrderByInput!]): [City!]!
  cityByUniqueInput(where: CityWhereUniqueInput!): City
  citiesConnection(first: Int, after: String, last: Int, before: String, where: CityWhereInput, orderBy: [CityOrderByInput!]): CityConnection!
  consumptions(offset: Int, limit: Int = 50, where: ConsumptionWhereInput, orderBy: [ConsumptionOrderByInput!]): [Consumption!]!
  consumptionByUniqueInput(where: ConsumptionWhereUniqueInput!): Consumption
  consumptionsConnection(first: Int, after: String, last: Int, before: String, where: ConsumptionWhereInput, orderBy: [ConsumptionOrderByInput!]): ConsumptionConnection!
  contractBillReports(offset: Int, limit: Int = 50, where: ContractBillReportWhereInput, orderBy: [ContractBillReportOrderByInput!]): [ContractBillReport!]!
  contractBillReportByUniqueInput(where: ContractBillReportWhereUniqueInput!): ContractBillReport
  contractBillReportsConnection(first: Int, after: String, last: Int, before: String, where: ContractBillReportWhereInput, orderBy: [ContractBillReportOrderByInput!]): ContractBillReportConnection!
  countries(offset: Int, limit: Int = 50, where: CountryWhereInput, orderBy: [CountryOrderByInput!]): [Country!]!
  countryByUniqueInput(where: CountryWhereUniqueInput!): Country
  countriesConnection(first: Int, after: String, last: Int, before: String, where: CountryWhereInput, orderBy: [CountryOrderByInput!]): CountryConnection!
  entityProofs(offset: Int, limit: Int = 50, where: EntityProofWhereInput, orderBy: [EntityProofOrderByInput!]): [EntityProof!]!
  entityProofByUniqueInput(where: EntityProofWhereUniqueInput!): EntityProof
  entityProofsConnection(first: Int, after: String, last: Int, before: String, where: EntityProofWhereInput, orderBy: [EntityProofOrderByInput!]): EntityProofConnection!
  entities(offset: Int, limit: Int = 50, where: EntityWhereInput, orderBy: [EntityOrderByInput!]): [Entity!]!
  entityByUniqueInput(where: EntityWhereUniqueInput!): Entity
  entitiesConnection(first: Int, after: String, last: Int, before: String, where: EntityWhereInput, orderBy: [EntityOrderByInput!]): EntityConnection!
  farms(offset: Int, limit: Int = 50, where: FarmWhereInput, orderBy: [FarmOrderByInput!]): [Farm!]!
  farmByUniqueInput(where: FarmWhereUniqueInput!): Farm
  farmsConnection(first: Int, after: String, last: Int, before: String, where: FarmWhereInput, orderBy: [FarmOrderByInput!]): FarmConnection!
  locations(offset: Int, limit: Int = 50, where: LocationWhereInput, orderBy: [LocationOrderByInput!]): [Location!]!
  locationByUniqueInput(where: LocationWhereUniqueInput!): Location
  locationsConnection(first: Int, after: String, last: Int, before: String, where: LocationWhereInput, orderBy: [LocationOrderByInput!]): LocationConnection!
  nodeContracts(offset: Int, limit: Int = 50, where: NodeContractWhereInput, orderBy: [NodeContractOrderByInput!]): [NodeContract!]!
  nodeContractByUniqueInput(where: NodeContractWhereUniqueInput!): NodeContract
  nodeContractsConnection(first: Int, after: String, last: Int, before: String, where: NodeContractWhereInput, orderBy: [NodeContractOrderByInput!]): NodeContractConnection!
  nodes(offset: Int, limit: Int = 50, where: NodeWhereInput, orderBy: [NodeOrderByInput!]): [Node!]!
  nodeByUniqueInput(where: NodeWhereUniqueInput!): Node
  nodesConnection(first: Int, after: String, last: Int, before: String, where: NodeWhereInput, orderBy: [NodeOrderByInput!]): NodeConnection!
  pricingPolicies(offset: Int, limit: Int = 50, where: PricingPolicyWhereInput, orderBy: [PricingPolicyOrderByInput!]): [PricingPolicy!]!
  pricingPolicyByUniqueInput(where: PricingPolicyWhereUniqueInput!): PricingPolicy
  pricingPoliciesConnection(first: Int, after: String, last: Int, before: String, where: PricingPolicyWhereInput, orderBy: [PricingPolicyOrderByInput!]): PricingPolicyConnection!
  publicConfigs(offset: Int, limit: Int = 50, where: PublicConfigWhereInput, orderBy: [PublicConfigOrderByInput!]): [PublicConfig!]!
  publicConfigByUniqueInput(where: PublicConfigWhereUniqueInput!): PublicConfig
  publicConfigsConnection(first: Int, after: String, last: Int, before: String, where: PublicConfigWhereInput, orderBy: [PublicConfigOrderByInput!]): PublicConfigConnection!
  publicIps(offset: Int, limit: Int = 50, where: PublicIpWhereInput, orderBy: [PublicIpOrderByInput!]): [PublicIp!]!
  publicIpByUniqueInput(where: PublicIpWhereUniqueInput!): PublicIp
  publicIpsConnection(first: Int, after: String, last: Int, before: String, where: PublicIpWhereInput, orderBy: [PublicIpOrderByInput!]): PublicIpConnection!
  commentSearch(whereTransfer: TransferWhereInput, skip: Int = 0, limit: Int = 5, text: String!): [CommentSearchFTSOutput!]!
  transfers(offset: Int, limit: Int = 50, where: TransferWhereInput, orderBy: [TransferOrderByInput!]): [Transfer!]!
  transferByUniqueInput(where: TransferWhereUniqueInput!): Transfer
  transfersConnection(first: Int, after: String, last: Int, before: String, where: TransferWhereInput, orderBy: [TransferOrderByInput!]): TransferConnection!
  twins(offset: Int, limit: Int = 50, where: TwinWhereInput, orderBy: [TwinOrderByInput!]): [Twin!]!
  twinByUniqueInput(where: TwinWhereUniqueInput!): Twin
  twinsConnection(first: Int, after: String, last: Int, before: String, where: TwinWhereInput, orderBy: [TwinOrderByInput!]): TwinConnection!
}

type StandardDeleteResponse {
  id: ID!
}

type Subscription {
  stateSubscription: ProcessorState!
}

""" All transfers """
type Transfer implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  from: String!
  to: String!
  value: BigInt!
  comment: String
  block: Int!
}

type TransferConnection {
  totalCount: Int!
  edges: [TransferEdge!]!
  pageInfo: PageInfo!
}

input TransferCreateInput {
  from: String!
  to: String!
  value: BigInt!
  comment: String
  block: Float!
}

type TransferEdge {
  node: Transfer!
  cursor: String!
}

enum TransferOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  value_ASC
  value_DESC
  comment_ASC
  comment_DESC
  block_ASC
  block_DESC
}

input TransferUpdateInput {
  from: String
  to: String
  value: BigInt
  comment: String
  block: Float
}

input TransferWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  from_eq: String
  from_contains: String
  from_startsWith: String
  from_endsWith: String
  from_in: [String!]
  to_eq: String
  to_contains: String
  to_startsWith: String
  to_endsWith: String
  to_in: [String!]
  value_eq: BigInt
  value_gt: BigInt
  value_gte: BigInt
  value_lt: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  comment_eq: String
  comment_contains: String
  comment_startsWith: String
  comment_endsWith: String
  comment_in: [String!]
  block_eq: Int
  block_gt: Int
  block_gte: Int
  block_lt: Int
  block_lte: Int
  block_in: [Int!]
  AND: [TransferWhereInput!]
  OR: [TransferWhereInput!]
}

input TransferWhereUniqueInput {
  id: ID!
}

type Twin implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  gridVersion: Int!
  twinId: Int!
  accountId: String!
  ip: String!
  entityprooftwinRel: [EntityProof!]
}

type TwinConnection {
  totalCount: Int!
  edges: [TwinEdge!]!
  pageInfo: PageInfo!
}

input TwinCreateInput {
  gridVersion: Float!
  twinId: Float!
  accountId: String!
  ip: String!
}

type TwinEdge {
  node: Twin!
  cursor: String!
}

enum TwinOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  gridVersion_ASC
  gridVersion_DESC
  twinId_ASC
  twinId_DESC
  accountId_ASC
  accountId_DESC
  ip_ASC
  ip_DESC
}

input TwinUpdateInput {
  gridVersion: Float
  twinId: Float
  accountId: String
  ip: String
}

input TwinWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  gridVersion_eq: Int
  gridVersion_gt: Int
  gridVersion_gte: Int
  gridVersion_lt: Int
  gridVersion_lte: Int
  gridVersion_in: [Int!]
  twinId_eq: Int
  twinId_gt: Int
  twinId_gte: Int
  twinId_lt: Int
  twinId_lte: Int
  twinId_in: [Int!]
  accountId_eq: String
  accountId_contains: String
  accountId_startsWith: String
  accountId_endsWith: String
  accountId_in: [String!]
  ip_eq: String
  ip_contains: String
  ip_startsWith: String
  ip_endsWith: String
  ip_in: [String!]
  entityprooftwinRel_none: EntityProofWhereInput
  entityprooftwinRel_some: EntityProofWhereInput
  entityprooftwinRel_every: EntityProofWhereInput
  AND: [TwinWhereInput!]
  OR: [TwinWhereInput!]
}

input TwinWhereUniqueInput {
  id: ID!
}
